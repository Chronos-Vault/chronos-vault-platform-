;; CVTBridge.fc
;; TON Smart Contract for Cross-Chain Bridge for Chronos Vault

#include "imports/stdlib.fc";

;; Storage variables
global cell ethereum_relayers;    ;; Dictionary of Ethereum relayer addresses
global cell solana_relayers;      ;; Dictionary of Solana relayer addresses
global int eth_relayer_count;     ;; Number of registered Ethereum relayers
global int sol_relayer_count;     ;; Number of registered Solana relayers
global int eth_confirmation_req;  ;; Required confirmations for Ethereum events
global int sol_confirmation_req;  ;; Required confirmations for Solana events
global slice admin_address;       ;; Admin address that can register relayers
global cell verified_vaults;      ;; Dictionary of verified vault data across chains
global cell last_relay;           ;; Last relay information for each chain
global int bridge_active;         ;; 1 if bridge is active, 0 if paused

;; Error codes
const int ERROR_NOT_ADMIN = 201;
const int ERROR_NOT_RELAYER = 202;
const int ERROR_BRIDGE_PAUSED = 203;
const int ERROR_INVALID_SIGNATURE = 204;
const int ERROR_INSUFFICIENT_CONFIRMATIONS = 205;
const int ERROR_ALREADY_REGISTERED = 206;
const int ERROR_ALREADY_VERIFIED = 207;
const int ERROR_INVALID_CHAIN_ID = 208;

;; Chain IDs
const int CHAIN_TON = 1;
const int CHAIN_ETHEREUM = 2;
const int CHAIN_SOLANA = 3;

;; Load storage function
() load_data() impure {
    var ds = get_data().begin_parse();
    ethereum_relayers = ds~load_dict();
    solana_relayers = ds~load_dict();
    eth_relayer_count = ds~load_uint(8);
    sol_relayer_count = ds~load_uint(8);
    eth_confirmation_req = ds~load_uint(8);
    sol_confirmation_req = ds~load_uint(8);
    admin_address = ds~load_msg_addr();
    verified_vaults = ds~load_dict();
    last_relay = ds~load_dict();
    bridge_active = ds~load_uint(1);
    ds.end_parse();
}

;; Save storage function
() save_data() impure {
    set_data(begin_cell()
        .store_dict(ethereum_relayers)
        .store_dict(solana_relayers)
        .store_uint(eth_relayer_count, 8)
        .store_uint(sol_relayer_count, 8)
        .store_uint(eth_confirmation_req, 8)
        .store_uint(sol_confirmation_req, 8)
        .store_slice(admin_address)
        .store_dict(verified_vaults)
        .store_dict(last_relay)
        .store_uint(bridge_active, 1)
        .end_cell());
}

;; Check if sender is admin
int is_admin(slice sender_address) inline {
    return equal_slices(sender_address, admin_address);
}

;; Check if sender is an Ethereum relayer
int is_eth_relayer(slice sender_address) inline {
    return ~ cell_null?(ethereum_relayers.udict_get_ref(256, sender_address.preload_uint(256)));
}

;; Check if sender is a Solana relayer
int is_sol_relayer(slice sender_address) inline {
    return ~ cell_null?(solana_relayers.udict_get_ref(256, sender_address.preload_uint(256)));
}

;; Register a new Ethereum relayer
() register_eth_relayer(slice relayer_address) impure {
    ;; Create relayer data
    var relayer_data = begin_cell()
        .store_slice(relayer_address)
        .store_uint(now(), 64)       ;; Registration timestamp
        .store_uint(0, 64)           ;; Last activity timestamp
        .store_uint(0, 32)           ;; Message count
        .end_cell();
    
    ;; Add to relayers dictionary
    ethereum_relayers~udict_set_ref(256, relayer_address.preload_uint(256), relayer_data);
    eth_relayer_count += 1;
    
    save_data();
}

;; Register a new Solana relayer
() register_sol_relayer(slice relayer_address) impure {
    ;; Create relayer data
    var relayer_data = begin_cell()
        .store_slice(relayer_address)
        .store_uint(now(), 64)       ;; Registration timestamp
        .store_uint(0, 64)           ;; Last activity timestamp
        .store_uint(0, 32)           ;; Message count
        .end_cell();
    
    ;; Add to relayers dictionary
    solana_relayers~udict_set_ref(256, relayer_address.preload_uint(256), relayer_data);
    sol_relayer_count += 1;
    
    save_data();
}

;; Set required confirmations
() set_confirmations(int eth_conf, int sol_conf) impure {
    eth_confirmation_req = eth_conf;
    sol_confirmation_req = sol_conf;
    save_data();
}

;; Pause/unpause the bridge
() set_bridge_active(int active) impure {
    bridge_active = active;
    save_data();
}

;; Record a vault verification from Ethereum
() record_ethereum_verification(int vault_id, slice eth_proof, slice vault_data) impure {
    ;; Check if bridge is active
    if (~ bridge_active) {
        throw(ERROR_BRIDGE_PAUSED);
    }
    
    ;; Vault key for dictionary
    var vault_key = begin_cell().store_uint(vault_id, 64).end_cell().begin_parse();
    
    ;; Get current verification state
    (cell vault_verif_cell, int found?) = verified_vaults.udict_get_ref?(64, vault_key.preload_uint(64));
    
    int eth_verified = 0;
    int sol_verified = 0;
    int eth_conf_count = 0;
    cell eth_proofs = null();
    
    if (found?) {
        ;; Parse existing verification data
        slice vault_verif = vault_verif_cell.begin_parse();
        vault_data = vault_verif~load_ref().begin_parse();  ;; Reuse the same vault data
        eth_verified = vault_verif~load_uint(1);
        sol_verified = vault_verif~load_uint(1);
        eth_conf_count = vault_verif~load_uint(8);
        eth_proofs = vault_verif~load_dict();
    }
    
    ;; Add this proof to Ethereum proofs
    slice relayer_key = begin_cell().store_slice(sender_address).end_cell().begin_parse();
    eth_proofs~udict_set_ref(256, relayer_key.preload_uint(256), begin_cell().store_slice(eth_proof).end_cell());
    
    ;; Increment confirmation count
    eth_conf_count += 1;
    
    ;; Check if we have enough confirmations
    if (eth_conf_count >= eth_confirmation_req) {
        eth_verified = 1;
    }
    
    ;; Update the verification data
    var new_vault_verif = begin_cell()
        .store_ref(begin_cell().store_slice(vault_data).end_cell())
        .store_uint(eth_verified, 1)
        .store_uint(sol_verified, 1)
        .store_uint(eth_conf_count, 8)
        .store_dict(eth_proofs)
        .end_cell();
    
    ;; Store updated verification
    verified_vaults~udict_set_ref(64, vault_key.preload_uint(64), new_vault_verif);
    
    ;; Update last relay info
    last_relay~udict_set_ref(8, 
        begin_cell().store_uint(CHAIN_ETHEREUM, 8).end_cell().begin_parse().preload_uint(8), 
        begin_cell()
            .store_uint(now(), 64)
            .store_uint(vault_id, 64)
        .end_cell());
    
    save_data();
}

;; Record a vault verification from Solana
() record_solana_verification(int vault_id, slice sol_proof, slice vault_data) impure {
    ;; Check if bridge is active
    if (~ bridge_active) {
        throw(ERROR_BRIDGE_PAUSED);
    }
    
    ;; Vault key for dictionary
    var vault_key = begin_cell().store_uint(vault_id, 64).end_cell().begin_parse();
    
    ;; Get current verification state
    (cell vault_verif_cell, int found?) = verified_vaults.udict_get_ref?(64, vault_key.preload_uint(64));
    
    int eth_verified = 0;
    int sol_verified = 0;
    int sol_conf_count = 0;
    cell sol_proofs = null();
    
    if (found?) {
        ;; Parse existing verification data
        slice vault_verif = vault_verif_cell.begin_parse();
        vault_data = vault_verif~load_ref().begin_parse();  ;; Reuse the same vault data
        eth_verified = vault_verif~load_uint(1);
        sol_verified = vault_verif~load_uint(1);
        vault_verif~skip_bits(8);  ;; Skip eth_conf_count
        vault_verif~load_dict();  ;; Skip eth_proofs
        sol_conf_count = vault_verif~load_uint(8);
        sol_proofs = vault_verif~load_dict();
    }
    
    ;; Add this proof to Solana proofs
    slice relayer_key = begin_cell().store_slice(sender_address).end_cell().begin_parse();
    sol_proofs~udict_set_ref(256, relayer_key.preload_uint(256), begin_cell().store_slice(sol_proof).end_cell());
    
    ;; Increment confirmation count
    sol_conf_count += 1;
    
    ;; Check if we have enough confirmations
    if (sol_conf_count >= sol_confirmation_req) {
        sol_verified = 1;
    }
    
    ;; Update the verification data
    var new_vault_verif = begin_cell()
        .store_ref(begin_cell().store_slice(vault_data).end_cell())
        .store_uint(eth_verified, 1)
        .store_uint(sol_verified, 1)
        .store_uint(eth_conf_count, 8)
        .store_dict(eth_proofs)
        .store_uint(sol_conf_count, 8)
        .store_dict(sol_proofs)
        .end_cell();
    
    ;; Store updated verification
    verified_vaults~udict_set_ref(64, vault_key.preload_uint(64), new_vault_verif);
    
    ;; Update last relay info
    last_relay~udict_set_ref(8, 
        begin_cell().store_uint(CHAIN_SOLANA, 8).end_cell().begin_parse().preload_uint(8), 
        begin_cell()
            .store_uint(now(), 64)
            .store_uint(vault_id, 64)
        .end_cell());
    
    save_data();
}

;; Get vault verification status
(int, int) get_vault_verification(int vault_id) method_id {
    load_data();
    
    ;; Vault key for dictionary
    var vault_key = begin_cell().store_uint(vault_id, 64).end_cell().begin_parse();
    
    ;; Get verification state
    (cell vault_verif_cell, int found?) = verified_vaults.udict_get_ref?(64, vault_key.preload_uint(64));
    
    if (~ found?) {
        return (0, 0);  ;; Not verified on either chain
    }
    
    ;; Parse verification data
    slice vault_verif = vault_verif_cell.begin_parse();
    vault_verif~load_ref();  ;; Skip vault data
    int eth_verified = vault_verif~load_uint(1);
    int sol_verified = vault_verif~load_uint(1);
    
    return (eth_verified, sol_verified);
}

;; Check if a vault is verified on all chains
int is_fully_verified(int vault_id) method_id {
    load_data();
    
    ;; Vault key for dictionary
    var vault_key = begin_cell().store_uint(vault_id, 64).end_cell().begin_parse();
    
    ;; Get verification state
    (cell vault_verif_cell, int found?) = verified_vaults.udict_get_ref?(64, vault_key.preload_uint(64));
    
    if (~ found?) {
        return 0;  ;; Not verified at all
    }
    
    ;; Parse verification data
    slice vault_verif = vault_verif_cell.begin_parse();
    vault_verif~load_ref();  ;; Skip vault data
    int eth_verified = vault_verif~load_uint(1);
    int sol_verified = vault_verif~load_uint(1);
    
    ;; Only return true if verified on all chains
    return eth_verified & sol_verified;
}

;; Get the vault data across chains
cell get_vault_data(int vault_id) method_id {
    load_data();
    
    ;; Vault key for dictionary
    var vault_key = begin_cell().store_uint(vault_id, 64).end_cell().begin_parse();
    
    ;; Get verification state
    (cell vault_verif_cell, int found?) = verified_vaults.udict_get_ref?(64, vault_key.preload_uint(64));
    
    if (~ found?) {
        return null();  ;; No data found
    }
    
    ;; Parse verification data and extract vault data
    slice vault_verif = vault_verif_cell.begin_parse();
    cell vault_data = vault_verif~load_ref();
    
    return vault_data;
}

;; Get bridge statistics
(int, int, int, int, int) get_bridge_stats() method_id {
    load_data();
    return (eth_relayer_count, sol_relayer_count, eth_confirmation_req, sol_confirmation_req, bridge_active);
}

;; Contract entry point for receiving internal messages
() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    ;; Check if this is a bounced message
    slice cs = in_msg_cell.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; Ignore bounced messages
        return ();
    }
    
    load_data();
    
    ;; Parse the message op code
    int op = in_msg~load_uint(32);
    
    ;; Sender address
    slice sender_address = in_msg~load_msg_addr();
    
    ;; Admin operations
    if (op == 1) { ;; Register Ethereum relayer
        if (~ is_admin(sender_address)) {
            throw(ERROR_NOT_ADMIN);
        }
        
        slice relayer_address = in_msg~load_msg_addr();
        register_eth_relayer(relayer_address);
        return ();
    }
    
    if (op == 2) { ;; Register Solana relayer
        if (~ is_admin(sender_address)) {
            throw(ERROR_NOT_ADMIN);
        }
        
        slice relayer_address = in_msg~load_msg_addr();
        register_sol_relayer(relayer_address);
        return ();
    }
    
    if (op == 3) { ;; Set required confirmations
        if (~ is_admin(sender_address)) {
            throw(ERROR_NOT_ADMIN);
        }
        
        int eth_conf = in_msg~load_uint(8);
        int sol_conf = in_msg~load_uint(8);
        set_confirmations(eth_conf, sol_conf);
        return ();
    }
    
    if (op == 4) { ;; Pause/unpause bridge
        if (~ is_admin(sender_address)) {
            throw(ERROR_NOT_ADMIN);
        }
        
        int active = in_msg~load_uint(1);
        set_bridge_active(active);
        return ();
    }
    
    ;; Relayer operations
    if (op == 5) { ;; Submit Ethereum verification
        if (~ is_eth_relayer(sender_address)) {
            throw(ERROR_NOT_RELAYER);
        }
        
        if (~ bridge_active) {
            throw(ERROR_BRIDGE_PAUSED);
        }
        
        int vault_id = in_msg~load_uint(64);
        slice eth_proof = in_msg~load_ref().begin_parse();
        slice vault_data = in_msg~load_ref().begin_parse();
        
        record_ethereum_verification(vault_id, eth_proof, vault_data);
        return ();
    }
    
    if (op == 6) { ;; Submit Solana verification
        if (~ is_sol_relayer(sender_address)) {
            throw(ERROR_NOT_RELAYER);
        }
        
        if (~ bridge_active) {
            throw(ERROR_BRIDGE_PAUSED);
        }
        
        int vault_id = in_msg~load_uint(64);
        slice sol_proof = in_msg~load_ref().begin_parse();
        slice vault_data = in_msg~load_ref().begin_parse();
        
        record_solana_verification(vault_id, sol_proof, vault_data);
        return ();
    }
    
    ;; Unknown operation
    throw(0xffff);
}
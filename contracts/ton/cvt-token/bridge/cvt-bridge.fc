#include "../imports/stdlib.fc";
#include "../imports/jetton-utils.fc";
#include "../imports/op-codes.fc";

;; CVT Cross-Chain Bridge Contract
;; Handles bridging of CVT tokens between TON, Ethereum, and Solana blockchains
;;
;; This contract handles the TON side of the bridge, locking tokens when users
;; want to bridge to other chains, and unlocking them when bridging back.

;; Bridge operation codes
int op::bridge_out() asm "0x88a47bed PUSHINT"; ;; Lock tokens on TON for bridging out
int op::bridge_in() asm "0x67a42091 PUSHINT";  ;; Unlock tokens on TON when bridging in
int op::register_validator() asm "0x3c6151b2 PUSHINT"; ;; Register a new validator
int op::remove_validator() asm "0x65a0cea9 PUSHINT"; ;; Remove a validator
int op::execute_bridge_in() asm "0x49c6d3d6 PUSHINT"; ;; Execute a bridge-in operation (called by validators)
int op::update_threshold() asm "0x7d47e22c PUSHINT"; ;; Update the signature threshold for validators

;; Error codes
int error::not_owner() asm "401 PUSHINT";
int error::not_validator() asm "402 PUSHINT";
int error::invalid_threshold() asm "403 PUSHINT";
int error::invalid_amount() asm "404 PUSHINT";
int error::insufficient_signatures() asm "405 PUSHINT";
int error::insufficient_fee() asm "406 PUSHINT";
int error::invalid_chain() asm "407 PUSHINT";
int error::invalid_address() asm "408 PUSHINT";
int error::duplicate_bridge() asm "409 PUSHINT";
int error::bridge_not_found() asm "410 PUSHINT";

;; Supported chains
int chain::ethereum() asm "1 PUSHINT";
int chain::solana() asm "2 PUSHINT";

;; Storage TL-B:
;; storage#_ owner_address:MsgAddress jetton_master_address:MsgAddress
;;           fee_percentage:uint16 threshold:uint8 total_locked:Coins
;;           validators_dict:^Cell processed_bridges:^Cell = Storage;

(slice, slice, int, int, int, cell, cell) load_data() {
  var ds = get_data().begin_parse();
  return (
    ds~load_msg_addr(),     ;; owner_address
    ds~load_msg_addr(),     ;; jetton_master_address
    ds~load_uint(16),       ;; fee_percentage in basis points (0.01%)
    ds~load_uint(8),        ;; threshold - number of validator signatures required
    ds~load_coins(),        ;; total_locked - total amount of locked tokens
    ds~load_ref(),          ;; validators_dict - dictionary of validators
    ds~load_ref()           ;; processed_bridges - dictionary of processed bridge operations
  );
}

() save_data(slice owner_address, slice jetton_master_address, 
            int fee_percentage, int threshold, int total_locked,
            cell validators_dict, cell processed_bridges) impure {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_slice(jetton_master_address)
    .store_uint(fee_percentage, 16)
    .store_uint(threshold, 8)
    .store_coins(total_locked)
    .store_ref(validators_dict)
    .store_ref(processed_bridges)
    .end_cell());
}

;; Bridge request structure
;; bridge_request#_ user_address:MsgAddress target_chain:uint8 target_address:uint256
;;                 amount:Coins nonce:uint64 = BridgeRequest;

;; Create a bridge request cell
cell create_bridge_request(slice user_address, int target_chain, int target_address, int amount, int nonce) {
  return begin_cell()
    .store_slice(user_address)
    .store_uint(target_chain, 8)
    .store_uint(target_address, 256)
    .store_coins(amount)
    .store_uint(nonce, 64)
    .end_cell();
}

;; Calculate bridge operation hash for signatures
int calculate_bridge_hash(slice user_address, int target_chain, int target_address, int amount, int nonce) {
  return cell_hash(create_bridge_request(user_address, target_chain, target_address, amount, nonce));
}

;; Check if a validator exists
int is_validator(cell validators_dict, slice validator_address) {
  (slice cs, int found) = validators_dict.udict_get?(267, slice_hash(validator_address));
  return found;
}

;; Check if bridge operation has been processed
int is_processed_bridge(cell processed_bridges, int bridge_hash) {
  (slice cs, int found) = processed_bridges.udict_get?(256, bridge_hash);
  return found;
}

;; Add a processed bridge to storage
cell add_processed_bridge(cell processed_bridges, int bridge_hash) {
  return processed_bridges.udict_set_builder(256, bridge_hash, begin_cell().store_uint(now(), 64));
}

;; Lock tokens on TON for bridging out to another chain
() lock_tokens(slice user_address, slice jetton_master_address, int target_chain, int target_address, int amount, int nonce) impure {
  ;; Get user's wallet address
  slice user_wallet = calculate_user_jetton_wallet_address(user_address, jetton_master_address);
  
  ;; Build message to transfer tokens from user wallet to bridge contract
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(user_wallet)
    .store_coins(100000000) ;; 0.1 TON for fees
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::transfer(), 32)
    .store_uint(nonce, 64)
    .store_coins(amount)
    .store_slice(my_address())
    .store_slice(user_address)
    .store_coins(0)
    .store_uint(0, 1);
  send_raw_message(msg.end_cell(), 1);
}

;; Unlock tokens on TON when bridging back from another chain
() unlock_tokens(slice user_address, slice jetton_master_address, int amount, int nonce) impure {
  ;; Get bridge's wallet address
  slice bridge_wallet = calculate_user_jetton_wallet_address(my_address(), jetton_master_address);
  
  ;; Build message to transfer tokens from bridge wallet to user
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(bridge_wallet)
    .store_coins(50000000) ;; 0.05 TON for fees
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::transfer(), 32)
    .store_uint(nonce, 64)
    .store_coins(amount)
    .store_slice(user_address)
    .store_slice(my_address())
    .store_coins(0)
    .store_uint(0, 1);
  send_raw_message(msg.end_cell(), 1);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }
  
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  
  if (flags & 1) { ;; handle bounced messages
    return ();
  }
  
  slice sender_address = cs~load_msg_addr();
  cs~load_msg_addr(); ;; skip dst
  cs~load_coins(); ;; skip value
  cs~skip_bits(1); ;; skip extracurrency collection
  cs~load_coins(); ;; skip ihr_fee
  int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for calculation
  
  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);
  
  (slice owner_address, slice jetton_master_address, 
   int fee_percentage, int threshold, int total_locked,
   cell validators_dict, cell processed_bridges) = load_data();
  
  ;; Bridge out operation - lock tokens on TON for bridging to another chain
  if (op == op::bridge_out()) {
    int target_chain = in_msg_body~load_uint(8);
    int target_address = in_msg_body~load_uint(256);
    int amount = in_msg_body~load_coins();
    
    ;; Validate parameters
    throw_unless(error::invalid_amount(), amount > 0);
    throw_unless(error::invalid_chain(), (target_chain == chain::ethereum()) | (target_chain == chain::solana()));
    throw_unless(error::insufficient_fee(), msg_value >= 200000000); ;; Require at least 0.2 TON for fees
    
    ;; Calculate fee
    int fee_amount = (amount * fee_percentage) / 10000;
    int bridge_amount = amount - fee_amount;
    
    ;; Generate bridge nonce based on current time and sender
    int nonce = now() + slice_hash(sender_address);
    
    ;; Lock tokens
    lock_tokens(sender_address, jetton_master_address, target_chain, target_address, amount, nonce);
    
    ;; Update total locked amount
    total_locked += amount;
    
    ;; Emit bridge request event to validators
    int bridge_hash = calculate_bridge_hash(sender_address, target_chain, target_address, bridge_amount, nonce);
    
    ;; Save updated data
    save_data(owner_address, jetton_master_address, fee_percentage, threshold, total_locked, validators_dict, processed_bridges);
    
    ;; Send confirmation message to user
    var confirmation_msg = begin_cell()
      .store_uint(0x10, 6) ;; nobounce
      .store_slice(sender_address)
      .store_coins(10000000) ;; 0.01 TON
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(op::excesses(), 32)
      .store_uint(query_id, 64)
      .store_uint(bridge_hash, 256) ;; Include bridge hash for tracking
      .store_uint(target_chain, 8)
      .store_uint(target_address, 256);
    send_raw_message(confirmation_msg.end_cell(), 1);
    
    return ();
  }
  
  ;; Bridge in operation - validators confirm a bridge from another chain
  if (op == op::execute_bridge_in()) {
    ;; Verify that the sender is a validator
    throw_unless(error::not_validator(), is_validator(validators_dict, sender_address));
    
    ;; Read bridge parameters
    slice user_address = in_msg_body~load_msg_addr();
    int source_chain = in_msg_body~load_uint(8);
    int source_address = in_msg_body~load_uint(256);
    int amount = in_msg_body~load_coins();
    int nonce = in_msg_body~load_uint(64);
    
    ;; Verify bridge parameters
    throw_unless(error::invalid_amount(), amount > 0);
    throw_unless(error::invalid_chain(), (source_chain == chain::ethereum()) | (source_chain == chain::solana()));
    
    ;; Calculate bridge hash
    int bridge_hash = calculate_bridge_hash(user_address, source_chain, source_address, amount, nonce);
    
    ;; Check if bridge has already been processed
    throw_if(error::duplicate_bridge(), is_processed_bridge(processed_bridges, bridge_hash));
    
    ;; Get signatures count for this bridge operation
    (slice signatures_cs, int found) = processed_bridges.udict_get?(257, bridge_hash);
    int signatures_count = 0;
    if (found) {
      signatures_count = signatures_cs~load_uint(8);
      signatures_count += 1; ;; Add this validator's signature
    } else {
      signatures_count = 1; ;; First validator signature
    }
    
    ;; Update processed bridges with new signature count
    processed_bridges = processed_bridges.udict_set_builder(257, bridge_hash, 
                                         begin_cell().store_uint(signatures_count, 8));
    
    ;; Check if we've reached the threshold of signatures
    if (signatures_count >= threshold) {
      ;; Mark bridge as fully processed
      processed_bridges = add_processed_bridge(processed_bridges, bridge_hash);
      
      ;; Unlock tokens for the user
      unlock_tokens(user_address, jetton_master_address, amount, nonce);
      
      ;; Update total locked amount
      if (total_locked >= amount) {
        total_locked -= amount;
      } else {
        total_locked = 0; ;; Safeguard against underflow
      }
    }
    
    ;; Save updated data
    save_data(owner_address, jetton_master_address, fee_percentage, threshold, total_locked, validators_dict, processed_bridges);
    
    return ();
  }
  
  ;; Register a new validator (owner only)
  if (op == op::register_validator()) {
    throw_unless(error::not_owner(), equal_slices(sender_address, owner_address));
    
    slice validator_address = in_msg_body~load_msg_addr();
    
    ;; Add validator to dictionary
    validators_dict = validators_dict.udict_set_builder(267, slice_hash(validator_address), begin_cell());
    
    ;; Save updated data
    save_data(owner_address, jetton_master_address, fee_percentage, threshold, total_locked, validators_dict, processed_bridges);
    
    return ();
  }
  
  ;; Remove a validator (owner only)
  if (op == op::remove_validator()) {
    throw_unless(error::not_owner(), equal_slices(sender_address, owner_address));
    
    slice validator_address = in_msg_body~load_msg_addr();
    
    ;; Remove validator from dictionary
    (validators_dict, int deleted) = validators_dict.udict_delete?(267, slice_hash(validator_address));
    
    ;; Save updated data
    save_data(owner_address, jetton_master_address, fee_percentage, threshold, total_locked, validators_dict, processed_bridges);
    
    return ();
  }
  
  ;; Update the signature threshold (owner only)
  if (op == op::update_threshold()) {
    throw_unless(error::not_owner(), equal_slices(sender_address, owner_address));
    
    int new_threshold = in_msg_body~load_uint(8);
    
    ;; Validate new threshold
    throw_unless(error::invalid_threshold(), new_threshold > 0);
    
    ;; Save updated threshold
    save_data(owner_address, jetton_master_address, fee_percentage, new_threshold, total_locked, validators_dict, processed_bridges);
    
    return ();
  }
  
  throw(0xffff); ;; If the message is not processed
}

;; Get methods

;; Get bridge info
(slice, slice, int, int, int) get_bridge_info() method_id {
  (slice owner_address, slice jetton_master_address, 
   int fee_percentage, int threshold, int total_locked,
   cell validators_dict, cell processed_bridges) = load_data();
   
  int validator_count = 0;
  
  ;; Count validators (simplified, in real implementation we would track this in storage)
  ;; This is just a placeholder as FunC doesn't support dictionary iteration
  
  return (owner_address, jetton_master_address, fee_percentage, threshold, total_locked);
}

;; Check if address is a validator
int is_address_validator(slice addr) method_id {
  (slice owner_address, slice jetton_master_address, 
   int fee_percentage, int threshold, int total_locked,
   cell validators_dict, cell processed_bridges) = load_data();
   
  return is_validator(validators_dict, addr);
}

;; Get validator count
int get_validator_count() method_id {
  (slice owner_address, slice jetton_master_address, 
   int fee_percentage, int threshold, int total_locked,
   cell validators_dict, cell processed_bridges) = load_data();
   
  ;; In a real implementation, we would track this in storage
  ;; This is a placeholder for now
  return 0;
}

;; Check if a bridge operation has been processed
int check_bridge_processed(int bridge_hash) method_id {
  (slice owner_address, slice jetton_master_address, 
   int fee_percentage, int threshold, int total_locked,
   cell validators_dict, cell processed_bridges) = load_data();
   
  return is_processed_bridge(processed_bridges, bridge_hash);
}

;; Get bridge signature count
int get_bridge_signature_count(int bridge_hash) method_id {
  (slice owner_address, slice jetton_master_address, 
   int fee_percentage, int threshold, int total_locked,
   cell validators_dict, cell processed_bridges) = load_data();
   
  (slice signatures_cs, int found) = processed_bridges.udict_get?(257, bridge_hash);
  if (found) {
    return signatures_cs~load_uint(8);
  } else {
    return 0;
  }
}
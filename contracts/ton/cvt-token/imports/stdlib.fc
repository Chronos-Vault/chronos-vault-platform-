;; Standard library for TON Smart Contracts

{- 
  This is a minimized stdlib.fc file containing just what we need for the jetton contracts.
  The full stdlib.fc can be found in the TON blockchain repository.
-}

;; Globals
global int workchain;

() set_workchain(int wc) impure { workchain = wc; }

int min(int x, int y) { return (x < y) ? x : y; }
int max(int x, int y) { return (x > y) ? x : y; }

;; Cell operations
int cell_null?(cell c) asm "ISNULL";
int cell_hash(cell c) asm "HASHCU";
slice begin_parse(cell c) asm "CTOS";
(slice, cell) load_ref(slice s) asm( -> 1 0) "LDREF";
cell end_cell(builder b) asm "ENDC";

;; Slice operations
int slice_refs(slice s) asm "SREFS";
int slice_bits(slice s) asm "SBITS";
int slice_empty?(slice s) asm "SEMPTY";
(slice, int) load_uint(slice s, int len) asm( -> 1 0) "LDUX";
(slice, int) load_int(slice s, int len) asm( -> 1 0) "LDIX";
(slice, slice) load_bits(slice s, int len) asm( -> 1 0) "LDSLICEX";
slice skip_bits(slice s, int len) asm "SDSKIPFIRST";
(slice, cell) load_dict(slice s) asm( -> 1 0) "LDDICT";
(slice, slice) load_msg_addr(slice s) asm( -> 1 0) "LDMSGADDR";
(slice, int) load_coins(slice s) asm( -> 1 0) "LDGRAMS";

;; Builder operations
builder begin_cell() asm "NEWC";
builder store_ref(builder b, cell c) asm(c b) "STREF";
builder store_uint(builder b, int x, int len) asm(x b len) "STUX";
builder store_int(builder b, int x, int len) asm(x b len) "STIX";
builder store_slice(builder b, slice s) asm "STSLICER";
builder store_dict(builder b, cell c) asm(c b) "STDICT";
builder store_coins(builder b, int x) asm "STGRAMS";
builder store_addr(builder b, slice s) asm "STADDR";

;; Dictionary operations
(cell, ()) udict_delete?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUDELGET" "NULLSWAPIFNOT" "NULLSWAPIFNOT";

;; Exceptions
() throw(int n) impure asm "THROWANY";
() throw_if(int n, int cond) impure asm "THROWARGANYIF";
() throw_unless(int n, int cond) impure asm "THROWARGANYIFNOT";

;; Messages
() send_raw_message(cell msg, int mode) impure asm "SENDRAWMSG";

;; TVM-specific
int now() asm "NOW";
int random() impure asm "RANDU256";
int get_balance() impure asm "BALANCE";
slice my_address() asm "MYADDR";
(int, cell, slice) get_data() asm "c4 PUSH CTOS";
() set_data(cell c) impure asm "c4 POP";

;; Equal slices comparison (deep)
int equal_slices?(slice a, slice b) asm "SDEQ";

;; String utils
int string_hash(slice s) {
    if (slice_bits(s) % 8) {
        return 0; ;; Input string bits not aligning with bytes - cannot be a valid string
    }
    int hash = 0;
    int c = 0;
    while (~ slice_empty?(s)) {
        ;; Unpack 8 bits into int for ASCII values
        (s, c) = load_uint(s, 8);
        hash = (hash * 31 + c);
    }
    return hash;
}

int equal_slices(slice a, slice b) {
  return equal_slices?(a, b);
}
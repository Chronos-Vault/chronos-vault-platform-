#include "imports/stdlib.fc";
#include "imports/jetton-utils.fc";
#include "imports/op-codes.fc";

;; ChronosToken (CVT) Jetton Wallet Contract
;; Based on the TEP-0074 standard

;; Storage TL-B:
;; storage#_ balance:Coins owner_address:MsgAddress jetton_master_address:MsgAddress 
;;        ^[ locked_balance:Coins unlock_time:UInt64 ] = Storage;

(int, slice, slice, cell) load_data() {
  var ds = get_data().begin_parse();
  return (
    ds~load_coins(), ;; balance
    ds~load_msg_addr(), ;; owner_address
    ds~load_msg_addr(), ;; jetton_master_address
    ds~load_dict() ;; locked tokens info: (amount, unlock_time)
  );
}

() save_data(int balance, slice owner_address, slice jetton_master_address, cell locked_tokens) impure {
  set_data(begin_cell()
    .store_coins(balance)
    .store_slice(owner_address)
    .store_slice(jetton_master_address)
    .store_dict(locked_tokens)
    .end_cell());
}

() send_tokens(slice to_address, int amount, slice owner_address, int query_id, int forward_ton_amount, slice forward_payload, int send_mode) impure {
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(to_address)
    .store_coins(forward_ton_amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::internal_transfer(), 32)
    .store_uint(query_id, 64)
    .store_coins(amount)
    .store_slice(jetton_master_address)
    .store_slice(owner_address)
    .store_uint(0, 1)
    .store_slice(forward_payload);
  send_raw_message(msg.end_cell(), send_mode);
}

() burn_tokens(int amount, slice owner_address, int query_id) impure {
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(jetton_master_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::burn_notification(), 32)
    .store_uint(query_id, 64)
    .store_coins(amount)
    .store_slice(owner_address)
    .store_uint(0, 1);
  send_raw_message(msg.end_cell(), 64);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }
  
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  
  if (flags & 1) { ;; handle bounced messages
    return ();
  }
  
  slice sender_address = cs~load_msg_addr();
  cs~load_msg_addr(); ;; skip dst
  cs~load_coins(); ;; skip value
  cs~skip_bits(1); ;; skip extracurrency collection
  cs~load_coins(); ;; skip ihr_fee
  int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for calculation
  
  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);
  
  (int balance, slice owner_address, slice jetton_master_address, cell locked_tokens) = load_data();
  
  if (op == op::transfer()) {
    int amount = in_msg_body~load_coins();
    slice to_owner_address = in_msg_body~load_msg_addr();
    slice response_address = in_msg_body~load_msg_addr();
    int forward_ton_amount = in_msg_body~load_coins();
    
    throw_unless(705, equal_slices(sender_address, owner_address));
    throw_unless(706, balance >= amount);
    
    ;; Check if user has unlocked tokens to spend
    int current_time = now();
    int available_balance = balance;
    
    slice locked_dict = locked_tokens.begin_parse();
    while (~locked_dict.slice_empty?()) {
        int locked_amount = locked_dict~load_coins();
        int unlock_time = locked_dict~load_uint(64);
        
        if (unlock_time > current_time) {
            available_balance -= locked_amount;
        }
    }
    
    throw_unless(707, available_balance >= amount);
    
    balance -= amount;
    save_data(balance, owner_address, jetton_master_address, locked_tokens);
    
    ;; Send the rest of the message
    cell state_init = calculate_jetton_wallet_init(to_owner_address, jetton_master_address);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    
    ;; Code below is handling excesses
    ;; Forward ton amount and forward ton payload
    int ton_amount = forward_ton_amount;
    slice forward_payload = in_msg_body;
    
    send_tokens(to_wallet_address, amount, owner_address, query_id, ton_amount, forward_payload, 1);
    
    return ();
  }
  
  if (op == op::internal_transfer()) {
    int amount = in_msg_body~load_coins();
    slice from_address = in_msg_body~load_msg_addr();
    slice response_address = in_msg_body~load_msg_addr();
    int forward_ton_amount = in_msg_body~load_coins();
    
    ;; Only accept internal_transfer from master or token wallet
    throw_unless(707, equal_slices(sender_address, jetton_master_address) | 
                      equal_slices(sender_address, calculate_user_jetton_wallet_address(from_address, jetton_master_address)));
    
    balance += amount;
    save_data(balance, owner_address, jetton_master_address, locked_tokens);
    
    if (forward_ton_amount) {
      slice forward_payload = in_msg_body;
      
      var msg = begin_cell()
              .store_uint(0x18, 6)
              .store_slice(owner_address)
              .store_coins(forward_ton_amount)
              .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
              .store_uint(op::transfer_notification(), 32)
              .store_uint(query_id, 64)
              .store_coins(amount)
              .store_slice(from_address)
              .store_slice(forward_payload);
      send_raw_message(msg.end_cell(), 1);
    }
    
    if ((response_address.preload_uint(2) != 0) & (msg_value > forward_ton_amount)) {
      var msg = begin_cell()
              .store_uint(0x10, 6) ;; nobounce
              .store_slice(response_address)
              .store_coins(0)
              .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
              .store_uint(op::excesses(), 32)
              .store_uint(query_id, 64);
      send_raw_message(msg.end_cell(), 1);
    }
    
    return ();
  }
  
  if (op == op::burn()) {
    int amount = in_msg_body~load_coins();
    slice response_address = in_msg_body~load_msg_addr();
    
    throw_unless(705, equal_slices(sender_address, owner_address));
    throw_unless(706, balance >= amount);
    throw_unless(707, amount > 0);
    
    ;; Check if user has unlocked tokens to spend
    int current_time = now();
    int available_balance = balance;
    
    slice locked_dict = locked_tokens.begin_parse();
    while (~locked_dict.slice_empty?()) {
        int locked_amount = locked_dict~load_coins();
        int unlock_time = locked_dict~load_uint(64);
        
        if (unlock_time > current_time) {
            available_balance -= locked_amount;
        }
    }
    
    throw_unless(707, available_balance >= amount);
    
    balance -= amount;
    save_data(balance, owner_address, jetton_master_address, locked_tokens);
    
    ;; Send burn notification
    burn_tokens(amount, owner_address, query_id);
    
    ;; Send excesses
    if (response_address.preload_uint(2) != 0) {
      var msg = begin_cell()
              .store_uint(0x10, 6) ;; nobounce
              .store_slice(response_address)
              .store_coins(0)
              .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
              .store_uint(op::excesses(), 32)
              .store_uint(query_id, 64);
      send_raw_message(msg.end_cell(), 1);
    }
    
    return ();
  }
  
  if (op == op::time_lock()) {
    int lock_amount = in_msg_body~load_coins();
    int lock_until = in_msg_body~load_uint(64);
    
    throw_unless(705, equal_slices(sender_address, owner_address));
    throw_unless(706, balance >= lock_amount);
    throw_unless(707, lock_amount > 0);
    throw_unless(708, lock_until > now());
    
    ;; Update the locked tokens
    cell new_locked_tokens = begin_cell()
                            .store_coins(lock_amount)
                            .store_uint(lock_until, 64)
                            .end_cell();
                            
    save_data(balance, owner_address, jetton_master_address, new_locked_tokens);
    
    return ();
  }
  
  throw(0xffff); ;; If the message is not processed
}

;; Get methods

(int, slice, slice, cell) get_wallet_data() method_id {
  return load_data();
}

int get_balance() method_id {
  (int balance, slice owner_address, slice jetton_master_address, cell locked_tokens) = load_data();
  return balance;
}

int get_available_balance() method_id {
  (int balance, slice owner_address, slice jetton_master_address, cell locked_tokens) = load_data();
  
  int current_time = now();
  int available_balance = balance;
  
  slice locked_dict = locked_tokens.begin_parse();
  while (~locked_dict.slice_empty?()) {
      int locked_amount = locked_dict~load_coins();
      int unlock_time = locked_dict~load_uint(64);
      
      if (unlock_time > current_time) {
          available_balance -= locked_amount;
      }
  }
  
  return available_balance;
}

cell get_locked_tokens() method_id {
  (int balance, slice owner_address, slice jetton_master_address, cell locked_tokens) = load_data();
  return locked_tokens;
}
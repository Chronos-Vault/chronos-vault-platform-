#include "imports/stdlib.fc";
#include "imports/jetton-utils.fc";
#include "imports/op-codes.fc";

;; CVT Staking Vault Contract
;; Manages token staking for various tiers and calculates rewards

;; Storage TL-B:
;; storage#_ owner_address:MsgAddress jetton_master_address:MsgAddress
;;           guardian_threshold:Coins architect_threshold:Coins sovereign_threshold:Coins
;;           reward_rate_bp:uint16 min_lock_time:uint32 stake_dict:^Cell = Storage;
;;
;; stake_dict is a dictionary of user_address -> StakeInfo
;; StakeInfo: amount:Coins lock_until:uint64 staked_at:uint64 tier:uint8 = StakeInfo;

(slice, slice, int, int, int, int, int, cell) load_data() {
  var ds = get_data().begin_parse();
  return (
    ds~load_msg_addr(),     ;; owner_address
    ds~load_msg_addr(),     ;; jetton_master_address
    ds~load_coins(),        ;; guardian_threshold
    ds~load_coins(),        ;; architect_threshold
    ds~load_coins(),        ;; sovereign_threshold
    ds~load_uint(16),       ;; reward_rate_bp
    ds~load_uint(32),       ;; min_lock_time
    ds~load_dict()          ;; stake_dict
  );
}

() save_data(slice owner_address, slice jetton_master_address, 
            int guardian_threshold, int architect_threshold, int sovereign_threshold,
            int reward_rate_bp, int min_lock_time, cell stake_dict) impure {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_slice(jetton_master_address)
    .store_coins(guardian_threshold)
    .store_coins(architect_threshold)
    .store_coins(sovereign_threshold)
    .store_uint(reward_rate_bp, 16)
    .store_uint(min_lock_time, 32)
    .store_dict(stake_dict)
    .end_cell());
}

;; Determine tier level based on staked amount
int determine_tier(int amount, int guardian_threshold, int architect_threshold, int sovereign_threshold) {
  if (amount >= sovereign_threshold) {
    return 3; ;; Sovereign tier
  } elseif (amount >= architect_threshold) {
    return 2; ;; Architect tier
  } elseif (amount >= guardian_threshold) {
    return 1; ;; Guardian tier
  } else {
    return 0; ;; Below minimum threshold
  }
}

;; Calculate rewards based on staked amount, time staked, and tier multiplier
int calculate_rewards(int amount, int stake_time, int current_time, int tier, int reward_rate_bp) {
  int time_staked = current_time - stake_time;
  int base_rewards = (amount * time_staked * reward_rate_bp) / (365 * 86400 * 10000);
  
  ;; Apply tier multiplier
  int tier_multiplier = 100;
  if (tier == 1) {
    tier_multiplier = 110; ;; Guardian gets 1.1x
  } elseif (tier == 2) {
    tier_multiplier = 125; ;; Architect gets 1.25x
  } elseif (tier == 3) {
    tier_multiplier = 150; ;; Sovereign gets 1.5x
  }
  
  return (base_rewards * tier_multiplier) / 100;
}

;; Get user stake info
(int, int, int, int) get_stake_info(cell stake_dict, slice user_address) {
  (slice value, int found) = stake_dict.udict_get?(267, slice_hash(user_address));
  if (found) {
    return (
      value~load_coins(),  ;; amount
      value~load_uint(64), ;; lock_until
      value~load_uint(64), ;; staked_at
      value~load_uint(8)   ;; tier
    );
  } else {
    return (0, 0, 0, 0);
  }
}

;; Update user stake info
cell update_stake_info(cell stake_dict, slice user_address, int amount, int lock_until, int staked_at, int tier) {
  return stake_dict.udict_set_builder(267, slice_hash(user_address), begin_cell()
    .store_coins(amount)
    .store_uint(lock_until, 64)
    .store_uint(staked_at, 64)
    .store_uint(tier, 8));
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }
  
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  
  if (flags & 1) { ;; handle bounced messages
    return ();
  }
  
  slice sender_address = cs~load_msg_addr();
  cs~load_msg_addr(); ;; skip dst
  cs~load_coins(); ;; skip value
  cs~skip_bits(1); ;; skip extracurrency collection
  cs~load_coins(); ;; skip ihr_fee
  int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for calculation
  
  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);
  
  (slice owner_address, slice jetton_master_address, 
   int guardian_threshold, int architect_threshold, int sovereign_threshold,
   int reward_rate_bp, int min_lock_time, cell stake_dict) = load_data();
  
  if (op == op::stake()) {
    ;; Get stake amount and lock duration
    int amount = in_msg_body~load_coins();
    int lock_duration = in_msg_body~load_uint(32);
    
    ;; Validate
    throw_unless(401, amount > 0);
    throw_unless(402, lock_duration >= min_lock_time);
    
    ;; Determine tier
    int tier = determine_tier(amount, guardian_threshold, architect_threshold, sovereign_threshold);
    throw_unless(403, tier > 0); ;; Must qualify for at least Guardian tier
    
    ;; Calculate lock until time
    int current_time = now();
    int lock_until = current_time + lock_duration;
    
    ;; Check if user already has a stake
    (int existing_amount, int existing_lock_until, int existing_staked_at, int existing_tier) = 
      get_stake_info(stake_dict, sender_address);
    
    if (existing_amount > 0) {
      ;; User already has a stake
      
      ;; Check if existing stake is still locked
      throw_unless(404, current_time >= existing_lock_until);
      
      ;; Calculate rewards for existing stake
      int rewards = calculate_rewards(existing_amount, existing_staked_at, current_time, existing_tier, reward_rate_bp);
      
      ;; Add rewards to new stake amount
      amount += rewards;
      
      ;; Update tier based on new amount
      tier = determine_tier(amount, guardian_threshold, architect_threshold, sovereign_threshold);
    }
    
    ;; Update stake dictionary
    stake_dict = update_stake_info(stake_dict, sender_address, amount, lock_until, current_time, tier);
    
    ;; Save updated data
    save_data(owner_address, jetton_master_address, 
              guardian_threshold, architect_threshold, sovereign_threshold,
              reward_rate_bp, min_lock_time, stake_dict);
    
    ;; Request tokens from user's wallet
    slice user_wallet_address = calculate_user_jetton_wallet_address(sender_address, jetton_master_address);
    var msg = begin_cell()
      .store_uint(0x18, 6)
      .store_slice(user_wallet_address)
      .store_coins(50000000) ;; 0.05 TON for fees
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(op::transfer(), 32)
      .store_uint(query_id, 64)
      .store_coins(amount)
      .store_slice(my_address())
      .store_slice(sender_address)
      .store_coins(0)
      .store_uint(0, 1);
    send_raw_message(msg.end_cell(), 1);
    
    return ();
  }
  
  if (op == op::unstake()) {
    ;; Get current time
    int current_time = now();
    
    ;; Check if user has a stake
    (int amount, int lock_until, int staked_at, int tier) = get_stake_info(stake_dict, sender_address);
    throw_unless(401, amount > 0);
    
    ;; Check if stake is unlocked
    throw_unless(402, current_time >= lock_until);
    
    ;; Calculate rewards
    int rewards = calculate_rewards(amount, staked_at, current_time, tier, reward_rate_bp);
    int total_amount = amount + rewards;
    
    ;; Remove stake from dictionary
    stake_dict~udict_delete?(267, slice_hash(sender_address));
    
    ;; Save updated data
    save_data(owner_address, jetton_master_address, 
              guardian_threshold, architect_threshold, sovereign_threshold,
              reward_rate_bp, min_lock_time, stake_dict);
    
    ;; Send tokens back to user
    var msg = begin_cell()
      .store_uint(0x18, 6)
      .store_slice(jetton_master_address)
      .store_coins(50000000) ;; 0.05 TON for fees
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(op::transfer(), 32)
      .store_uint(query_id, 64)
      .store_coins(total_amount)
      .store_slice(sender_address)
      .store_slice(my_address())
      .store_coins(0)
      .store_uint(0, 1);
    send_raw_message(msg.end_cell(), 1);
    
    return ();
  }
  
  if (op == op::update_thresholds()) {
    ;; Only owner can update thresholds
    throw_unless(401, equal_slices(sender_address, owner_address));
    
    ;; Get new thresholds
    int new_guardian_threshold = in_msg_body~load_coins();
    int new_architect_threshold = in_msg_body~load_coins();
    int new_sovereign_threshold = in_msg_body~load_coins();
    
    ;; Validate thresholds
    throw_unless(402, new_guardian_threshold > 0);
    throw_unless(403, new_architect_threshold > new_guardian_threshold);
    throw_unless(404, new_sovereign_threshold > new_architect_threshold);
    
    ;; Update thresholds
    save_data(owner_address, jetton_master_address, 
              new_guardian_threshold, new_architect_threshold, new_sovereign_threshold,
              reward_rate_bp, min_lock_time, stake_dict);
    
    return ();
  }
  
  if (op == op::update_reward_rate()) {
    ;; Only owner can update reward rate
    throw_unless(401, equal_slices(sender_address, owner_address));
    
    ;; Get new reward rate
    int new_reward_rate_bp = in_msg_body~load_uint(16);
    
    ;; Validate reward rate (max 20% annual = 2000 basis points)
    throw_unless(402, (new_reward_rate_bp > 0) & (new_reward_rate_bp <= 2000));
    
    ;; Update reward rate
    save_data(owner_address, jetton_master_address, 
              guardian_threshold, architect_threshold, sovereign_threshold,
              new_reward_rate_bp, min_lock_time, stake_dict);
    
    return ();
  }
  
  if (op == op::update_min_lock_time()) {
    ;; Only owner can update min lock time
    throw_unless(401, equal_slices(sender_address, owner_address));
    
    ;; Get new min lock time
    int new_min_lock_time = in_msg_body~load_uint(32);
    
    ;; Validate min lock time (at least 1 day, no more than 2 years)
    throw_unless(402, (new_min_lock_time >= 86400) & (new_min_lock_time <= 63115200));
    
    ;; Update min lock time
    save_data(owner_address, jetton_master_address, 
              guardian_threshold, architect_threshold, sovereign_threshold,
              reward_rate_bp, new_min_lock_time, stake_dict);
    
    return ();
  }
  
  if (op == op::change_owner()) {
    ;; Only owner can change ownership
    throw_unless(401, equal_slices(sender_address, owner_address));
    
    ;; Get new owner address
    slice new_owner_address = in_msg_body~load_msg_addr();
    
    ;; Update owner address
    save_data(new_owner_address, jetton_master_address, 
              guardian_threshold, architect_threshold, sovereign_threshold,
              reward_rate_bp, min_lock_time, stake_dict);
    
    return ();
  }
  
  if (op == op::claim_rewards()) {
    ;; Get current time
    int current_time = now();
    
    ;; Check if user has a stake
    (int amount, int lock_until, int staked_at, int tier) = get_stake_info(stake_dict, sender_address);
    throw_unless(401, amount > 0);
    
    ;; Calculate rewards
    int rewards = calculate_rewards(amount, staked_at, current_time, tier, reward_rate_bp);
    throw_unless(402, rewards > 0);
    
    ;; Update stake info with new staked_at time
    stake_dict = update_stake_info(stake_dict, sender_address, amount, lock_until, current_time, tier);
    
    ;; Save updated data
    save_data(owner_address, jetton_master_address, 
              guardian_threshold, architect_threshold, sovereign_threshold,
              reward_rate_bp, min_lock_time, stake_dict);
    
    ;; Send reward tokens to user
    var msg = begin_cell()
      .store_uint(0x18, 6)
      .store_slice(jetton_master_address)
      .store_coins(50000000) ;; 0.05 TON for fees
      .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
      .store_uint(op::mint(), 32)
      .store_uint(query_id, 64)
      .store_slice(sender_address)
      .store_coins(rewards)
      .store_coins(0);
    send_raw_message(msg.end_cell(), 1);
    
    return ();
  }
  
  throw(0xffff); ;; If the message is not processed
}

;; Get methods

(int, int, int, int, int, int, int) get_staking_data() method_id {
  (slice owner_address, slice jetton_master_address, 
   int guardian_threshold, int architect_threshold, int sovereign_threshold,
   int reward_rate_bp, int min_lock_time, cell stake_dict) = load_data();
   
  return (guardian_threshold, architect_threshold, sovereign_threshold, 
          reward_rate_bp, min_lock_time, dict_empty?(stake_dict), dict_size(stake_dict));
}

(int, int, int, int, int) get_user_stake(slice user_address) method_id {
  (slice owner_address, slice jetton_master_address, 
   int guardian_threshold, int architect_threshold, int sovereign_threshold,
   int reward_rate_bp, int min_lock_time, cell stake_dict) = load_data();
   
  (int amount, int lock_until, int staked_at, int tier) = get_stake_info(stake_dict, user_address);
  
  int current_time = now();
  int is_locked = lock_until > current_time;
  int current_rewards = calculate_rewards(amount, staked_at, current_time, tier, reward_rate_bp);
  
  return (amount, current_rewards, lock_until, tier, is_locked);
}

int get_total_staked() method_id {
  (slice owner_address, slice jetton_master_address, 
   int guardian_threshold, int architect_threshold, int sovereign_threshold,
   int reward_rate_bp, int min_lock_time, cell stake_dict) = load_data();
   
  ;; Function to accumulate total from each stake
  int total = 0;
  
  ;; For TON FunC, we can't iterate over a dictionary directly, so we check:
  if (~ dict_empty?(stake_dict)) {
    ;; In a real implementation, we would keep a running total in storage
    ;; This is a simplified version
    return total;
  } else {
    return 0;
  }
}

int get_stake_tier_count(int tier) method_id {
  (slice owner_address, slice jetton_master_address, 
   int guardian_threshold, int architect_threshold, int sovereign_threshold,
   int reward_rate_bp, int min_lock_time, cell stake_dict) = load_data();
   
  ;; In a real implementation, we would keep counts per tier in storage
  ;; This is a simplified version
  if (tier < 1 | tier > 3) {
    return 0;
  }
  
  return 0; ;; Placeholder for real implementation
}
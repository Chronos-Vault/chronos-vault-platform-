#include "imports/stdlib.fc";
#include "imports/jetton-utils.fc";
#include "imports/op-codes.fc";

;; CVT Time-Lock Vault Contract
;; This contract manages time-locked token releases according to the CVT tokenomics model

;; Storage TL-B:
;; storage#_ owner_address:MsgAddress jetton_master_address:MsgAddress
;;           release_schedule:^Cell = Storage;
;;
;; release_schedule#_ item_count:uint8 
;;                  ^[ release_items:(item_count * [timestamp:uint64 amount:Coins]) ] = ReleaseSchedule;

(slice, slice, cell) load_data() {
  var ds = get_data().begin_parse();
  return (
    ds~load_msg_addr(), ;; owner_address
    ds~load_msg_addr(), ;; jetton_master_address
    ds~load_ref()       ;; release_schedule
  );
}

() save_data(slice owner_address, slice jetton_master_address, cell release_schedule) impure {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_slice(jetton_master_address)
    .store_ref(release_schedule)
    .end_cell());
}

() release_tokens(slice owner_address, slice jetton_master_address, int amount, int query_id) impure {
  ;; Calculate the wallet address for the owner
  slice owner_wallet_address = calculate_user_jetton_wallet_address(owner_address, jetton_master_address);
  
  ;; Build the mint message to the jetton master
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(jetton_master_address)
    .store_coins(amount)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
    .store_uint(op::mint(), 32)
    .store_uint(query_id, 64)
    .store_slice(owner_wallet_address)
    .store_coins(amount)
    .store_coins(0); ;; Forward amount
  
  send_raw_message(msg.end_cell(), 64); ;; Mode 64: Pay fees separately, ignore errors
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }
  
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);
  
  if (flags & 1) { ;; handle bounced messages
    return ();
  }
  
  slice sender_address = cs~load_msg_addr();
  cs~load_msg_addr(); ;; skip dst
  cs~load_coins(); ;; skip value
  cs~skip_bits(1); ;; skip extracurrency collection
  cs~load_coins(); ;; skip ihr_fee
  int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for calculation
  
  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);
  
  (slice owner_address, slice jetton_master_address, cell release_schedule) = load_data();
  
  if (op == op::check_release()) {
    ;; Verify that sender is the owner
    throw_unless(401, equal_slices(sender_address, owner_address));
    
    ;; Process release schedule
    slice rs = release_schedule.begin_parse();
    int item_count = rs~load_uint(8);
    cell release_items = rs~load_ref();
    
    ;; Parse release items
    slice ri = release_items.begin_parse();
    int current_time = now();
    int total_released = 0;
    int remaining_items = item_count;
    
    cell new_release_items = begin_cell().end_cell();
    int new_item_count = 0;
    
    ;; Check each release item
    repeat (item_count) {
        int release_time = ri~load_uint(64);
        int release_amount = ri~load_coins();
        
        if (release_time <= current_time) {
            ;; This batch should be released
            total_released += release_amount;
        } else {
            ;; This batch should remain locked
            new_item_count += 1;
            new_release_items = begin_cell().store_uint(release_time, 64).store_coins(release_amount).end_cell();
        }
    }
    
    ;; Update storage with remaining locked tokens
    cell new_schedule = begin_cell().store_uint(new_item_count, 8).store_ref(new_release_items).end_cell();
    save_data(owner_address, jetton_master_address, new_schedule);
    
    ;; Release tokens if any are due
    if (total_released > 0) {
        release_tokens(owner_address, jetton_master_address, total_released, query_id);
    }
    
    return ();
  }
  
  if (op == op::setup_schedule()) {
    ;; Only owner can setup or update the schedule
    throw_unless(401, equal_slices(sender_address, owner_address));
    
    ;; Load release item count and items
    int item_count = in_msg_body~load_uint(8);
    throw_unless(402, (item_count > 0) & (item_count <= 10)); ;; Reasonable limits on schedule size
    
    ;; Create new schedule cell
    cell new_release_items = begin_cell().end_cell();
    
    ;; Load each schedule item
    repeat (item_count) {
        int release_time = in_msg_body~load_uint(64);
        int release_amount = in_msg_body~load_coins();
        
        ;; Ensure future releases only
        throw_unless(403, release_time > now());
        
        ;; Add to the release items
        new_release_items = begin_cell()
                            .store_uint(release_time, 64)
                            .store_coins(release_amount)
                            .store_ref(new_release_items)
                            .end_cell();
    }
    
    ;; Update the schedule
    cell new_schedule = begin_cell().store_uint(item_count, 8).store_ref(new_release_items).end_cell();
    save_data(owner_address, jetton_master_address, new_schedule);
    
    return ();
  }
  
  if (op == op::change_owner()) {
    ;; Only owner can change ownership
    throw_unless(401, equal_slices(sender_address, owner_address));
    
    ;; Load new owner
    slice new_owner_address = in_msg_body~load_msg_addr();
    
    ;; Update storage
    save_data(new_owner_address, jetton_master_address, release_schedule);
    
    return ();
  }
  
  throw(0xffff); ;; If the message is not processed
}

;; Get methods

(slice, slice, int, int) get_vault_data() method_id {
  (slice owner_address, slice jetton_master_address, cell release_schedule) = load_data();
  
  ;; Calculate total locked amount
  slice rs = release_schedule.begin_parse();
  int item_count = rs~load_uint(8);
  cell release_items = rs~load_ref();
  
  slice ri = release_items.begin_parse();
  int total_locked = 0;
  int next_release_time = 0;
  
  if (item_count > 0) {
    ;; Find next release time
    next_release_time = ri.preload_uint(64);
    
    ;; Calculate total locked amount
    repeat (item_count) {
      ri~load_uint(64); ;; Skip timestamp
      total_locked += ri~load_coins();
    }
  }
  
  return (owner_address, jetton_master_address, total_locked, next_release_time);
}

cell get_release_schedule() method_id {
  (slice owner_address, slice jetton_master_address, cell release_schedule) = load_data();
  return release_schedule;
}